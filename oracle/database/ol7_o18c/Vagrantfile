# -*- mode: ruby -*-
# vi: set ft=ruby :

# Variables
var_vagrantfile_api_version  = "2"
var_vm_box_url               = "https://oracle.github.io/vagrant-projects/boxes/oraclelinux/7.json"
var_vm_box                   = "oraclelinux/7"
var_vm_name                  = 'ol7_o18c'
var_mem_size                 = 9216
var_cpus                     = 2
var_non_rotational           = 'on' # SSD
var_oracle_binary_disk_name  = './oracle_binary_disk_u01.vdi'
var_oracle_binary_disk_size  = 100
var_oracle_archive_disk_name = './oracle_archive_disk_u02.vdi'
var_oracle_archive_disk_size = 20
var_oracle_redo_disk1_name   = './oracle_redo_disk1_u03.vdi'
var_oracle_redo_disk1_size   = 5
var_oracle_redo_disk2_name   = './oracle_redo_disk2_u04.vdi'
var_oracle_redo_disk2_size   = 5
var_oracle_data_disk_name    = './oracle_data_disk_u05.vdi'
var_oracle_data_disk_size    = 100
var_public_ip                = '192.168.56.140'


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(var_vagrantfile_api_version) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box_url = var_vm_box_url
  config.vm.box = var_vm_box

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: var_public_ip

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  config.vm.provider "virtualbox" do |vb|
    vb.memory = var_mem_size
    vb.cpus   = var_cpus
    vb.name   = var_vm_name
    
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]

    unless File.exist?(var_oracle_binary_disk_name)
      vb.customize ['createhd', '--filename', var_oracle_binary_disk_name, '--size', var_oracle_binary_disk_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_oracle_binary_disk_name]

    unless File.exist?(var_oracle_archive_disk_name)
      vb.customize ['createhd', '--filename', var_oracle_archive_disk_name, '--size', var_oracle_archive_disk_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_oracle_archive_disk_name]

    unless File.exist?(var_oracle_redo_disk1_name)
      vb.customize ['createhd', '--filename', var_oracle_redo_disk1_name, '--size', var_oracle_redo_disk1_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 3, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_oracle_redo_disk1_name]

    unless File.exist?(var_oracle_redo_disk2_name)
      vb.customize ['createhd', '--filename', var_oracle_redo_disk2_name, '--size', var_oracle_redo_disk2_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 4, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_oracle_redo_disk2_name]

    unless File.exist?(var_oracle_data_disk_name)
      vb.customize ['createhd', '--filename', var_oracle_data_disk_name, '--size', var_oracle_data_disk_size * 1024]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 5, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_oracle_data_disk_name]
  end
  
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  #
  #config.vm.provision "shell", name: "something", path: "scripts/something.sh", env:
  #  {
  #     "parm1" => "value1",
  #     "parm2" => "value1"
  #  }
  config.vm.provision "shell", name: "setup", path: "scripts/setup.sh"

  end
